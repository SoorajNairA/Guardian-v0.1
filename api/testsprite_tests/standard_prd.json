{
  "meta": {
    "project": "Guardian API Backend",
    "date": "2025-09-29",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Guardian API is a high-performance, AI-powered backend service for real-time text threat detection across 14 security threat categories, supporting multi-language input and providing comprehensive monitoring, rate limiting, and AI enrichment.",
  "core_goals": [
    "Provide accurate real-time threat detection for user-generated text content with a high true positive rate.",
    "Support multi-language detection and weighted risk scoring for nuanced threat evaluation.",
    "Offer robust API security through database-backed API keys, rate limiting, and secure authentication.",
    "Ensure high system availability and reliability with distributed rate limiting, health monitoring, and fallback mechanisms.",
    "Enable operational visibility via structured logging, detailed metrics, and alerting systems.",
    "Facilitate extensibility and scalability for growing platform demands with modular design and horizontal scaling support."
  ],
  "key_features": [
    "Threat Detection Engine with 14 detailed threat categories including phishing, social engineering, malware instructions, prompt injection, and more.",
    "AI Enrichment integrating Google Gemini API for propaganda/disinformation detection, AI-generated content identification, and risk score adjustment.",
    "Authentication & Authorization with Supabase-managed API keys, Argon2 and SHA-256 dual hash support, and environment-based fallback.",
    "Distributed and dual-layer Rate Limiting using Redis and IP-based controls with sliding window algorithm and configurable limits.",
    "Health Monitoring endpoint providing concurrent dependency checks, response time tracking, and system resource monitoring.",
    "Asynchronous Structured Logging with batch processing, correlation and trace ID propagation, and retry logic.",
    "Metrics Collection supporting Prometheus integration, latency percentiles, and threat category counters.",
    "Alerting System for rule-based notifications on error rates, latencies, and health degradation with webhook support.",
    "Security features including input sanitization, XSS and SQL injection prevention, and output sanitization."
  ],
  "user_flow_summary": [
    "User sends a POST request to /v1/analyze with text and optional config parameters.",
    "API authenticates request using API key validation against Supabase or allowlist fallback.",
    "Input text is sanitized and analyzed through regex-based threat detection engine with language detection.",
    "AI enrichment layer analyzes the text via Google Gemini API to adjust risk score and detect AI-generated content.",
    "Results with risk score, identified threats, metadata, and correlation IDs are returned to the user.",
    "Request details are asynchronously logged in batches to Supabase with retry on failure.",
    "Rate limiting checks are applied per API key and IP address using Redis-backed sliding window counters.",
    "System health can be checked via GET /healthz, and performance metrics are accessible via GET /metrics.",
    "Alerting monitors system status and sends webhook notifications for anomalies."
  ],
  "validation_criteria": [
    "API must successfully analyze input text up to 100,000 characters within 500ms at P95 latency.",
    "Threat detection accuracy should exceed 95% true positive rate with less than 5% false positives.",
    "Authentication must reject invalid API keys and support fallback allowlist securely.",
    "Rate limiting must enforce configured limits accurately and provide rate limit headers in responses.",
    "Health check endpoint must reflect accurate dependency statuses and respond with appropriate HTTP codes.",
    "Logging system should process async batches without data loss and support graceful shutdown.",
    "Metrics endpoint must provide correct Prometheus-formatted output when enabled.",
    "Alerting system must trigger notifications based on defined thresholds without spamming.",
    "Input sanitization must prevent XSS, SQL injection, and control character attacks robustly."
  ],
  "code_summary": {
    "tech_stack": [
      "python",
      "fastapi",
      "pydantic",
      "uvicorn",
      "redis",
      "supabase",
      "httpx",
      "structlog"
    ],
    "features": [
      {
        "name": "Analyze Text",
        "description": "POST /v1/analyze analyzes input text and returns risk_score, threats_detected, and metadata.",
        "files": [
          "app/main.py",
          "app/classifier.py",
          "app/models.py",
          "app/gemini.py",
          "app/deps.py",
          "app/rate_limiter.py"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Guardian API",
            "version": "2.0.0"
          },
          "paths": {
            "/v1/analyze": {
              "post": {
                "summary": "Analyze text for threats",
                "tags": [
                  "Analysis"
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string"
                          },
                          "config": {
                            "type": "object",
                            "properties": {
                              "model_version": {
                                "type": "string"
                              },
                              "compliance_mode": {
                                "type": "string",
                                "enum": [
                                  "strict",
                                  "moderate",
                                  "permissive"
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Analysis result",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "request_id": {
                              "type": "string"
                            },
                            "risk_score": {
                              "type": "integer"
                            },
                            "threats_detected": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "category": {
                                    "type": "string"
                                  },
                                  "confidence_score": {
                                    "type": "number"
                                  },
                                  "details": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "category",
                                  "confidence_score"
                                ]
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "is_ai_generated": {
                                  "type": "boolean",
                                  "nullable": true
                                },
                                "language": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "gemini_error": {
                                  "type": "string",
                                  "nullable": true
                                }
                              }
                            }
                          },
                          "required": [
                            "risk_score",
                            "threats_detected",
                            "metadata",
                            "request_id"
                          ]
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "429": {
                    "description": "Rate limit exceeded"
                  },
                  "500": {
                    "description": "Internal server error"
                  }
                },
                "security": [
                  {
                    "apiKeyAuth": []
                  }
                ]
              }
            }
          },
          "components": {
            "securitySchemes": {
              "apiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "X-API-Key"
              }
            }
          }
        }
      },
      {
        "name": "Health Check",
        "description": "GET /healthz returns overall and dependency health.",
        "files": [
          "app/main.py",
          "app/health_monitor.py"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Guardian API",
            "version": "2.0.0"
          },
          "paths": {
            "/healthz": {
              "get": {
                "summary": "Get System Health",
                "responses": {
                  "200": {
                    "description": "OK"
                  },
                  "503": {
                    "description": "Unhealthy"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Metrics",
        "description": "GET /metrics exposes Prometheus metrics (if enabled).",
        "files": [
          "app/main.py",
          "app/metrics_collector.py"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Guardian API",
            "version": "2.0.0"
          },
          "paths": {
            "/metrics": {
              "get": {
                "summary": "Get Application Metrics",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
